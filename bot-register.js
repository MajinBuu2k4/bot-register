const mineflayer = require('mineflayer');
const fs = require('fs');
const path = require('path');
const webInventory = require('mineflayer-web-inventory');
const { pathfinder, Movements, goals: { GoalBlock } } = require('mineflayer-pathfinder');
const vi_tri_Vanguard18 = require('./module_rieng/vi_tri_Vanguard18');

// C·∫•u h√¨nh
const INVENTORY_PORT = 3000;

// Tr·∫°ng th√°i bot
let bot;
let state = {
    registered: false,
    loggedIn: false,
    menuOpened: false,
    warped: false,
    cooldown: false
};

// Dynamically use coordinates from configuration
const coordinates = { x: -17, y: 55, z: 141 }; // Default coordinates, will be updated by the tool

function createBot() {
    bot = mineflayer.createBot({
        host: 'mc.luckyvn.com',
        username: 'Vanguard18',
        version: '1.18.2',
    });

    bot.loadPlugin(pathfinder);
    webInventory(bot, { port: INVENTORY_PORT });

    bot.once('spawn', () => {
        const defaultMove = new Movements(bot);
        bot.pathfinder.setMovements(defaultMove);
        console.log("üü¢ Bot ƒë√£ v√†o game");
        console.log(`üåê Xem inventory t·∫°i: http://localhost:${INVENTORY_PORT}`);
    });

    bot.on('message', async (message) => {
        const msg = message.toString();
        console.log(message.toAnsi ? message.toAnsi() : msg);

        if (msg.includes('VUI L√íNG ƒêƒÇNG K√ç T√ÄI KHO·∫¢N.') && !state.registered) {
            await bot.chat('/register Phuc2005 Phuc2005');
            state.registered = true;
            console.log("üìù ƒê√£ g·ª≠i l·ªánh ƒëƒÉng k√Ω");

            setTimeout(async () => {
                await bot.chat('/login Phuc2005');
                state.loggedIn = true;
                console.log("üîê ƒê√£ g·ª≠i l·ªánh login");
            }, 3000);
        }

        if (msg.includes('ƒêƒÉng nh·∫≠p th√†nh c√¥ng') && !state.menuOpened) {
            setTimeout(() => {
                bot.setQuickBarSlot(4);
                bot.activateItem();
                console.log("üïπ M·ªü menu ch·ªçn ch·∫ø ƒë·ªô");
            }, 1000);
        }

        if (msg.includes('B·∫°n ƒë√£ m·ªü b·∫£ng ch·ªçn m√°y ch·ªß!') && !state.menuOpened) {
            state.menuOpened = true;
            setTimeout(() => bot.clickWindow(22, 0, 0), 1000);
            setTimeout(() => {
                bot.clickWindow(34, 0, 0);
                console.log("‚úÖ ƒê√£ ch·ªçn ch·∫ø ƒë·ªô ch∆°i");
            }, 2500);
        }

        // Reset tr·∫°ng th√°i khi v√†o s·∫£nh
        bot.on('respawn', () => {
            menuOpened = false;
            console.log('‚ôªÔ∏è ƒê√£ reset tr·∫°ng th√°i menu khi v√†o s·∫£nh');
            
            // ƒê·∫£m b·∫£o bot c·∫ßm Clock khi v√†o s·∫£nh
            setTimeout(() => {
                const clockSlot = bot.inventory.slots[36 + 4];
                if (clockSlot?.name.includes('clock')) {
                    bot.setQuickBarSlot(4);
                    console.log('üîÅ ƒê√£ c·∫ßm l·∫°i Clock sau khi v√†o s·∫£nh');
                }
            }, 2000);
        });

        if (msg.includes('Ch√†o m·ª´ng') && !state.warped) {
            state.warped = true;
            setTimeout(async () => {
                await bot.chat('/warp afk');
                console.log("üöÄ ƒêang warp sang khu AFK");

                setTimeout(async () => {
                    await vi_tri_Vanguard18(bot);
                }, 3000);
            }, 3000);
        }

        // Replace static coordinates with dynamic ones
        await bot.pathfinder.goto(new GoalBlock(coordinates.x, coordinates.y, coordinates.z));
    });

    process.stdin.on('data', data => {
        const input = data.toString().trim();
        if (!state.cooldown) {
            bot.chat(input);
            console.log(`‚å® G·ª≠i l·ªánh: ${input}`);
        }
    });
}

createBot();